15 > Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105
 
 
 Code:
 
 class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        int n = nums.size();
        
        if(n<3) return{}; //as we want triplet
        
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        
        for(int i=0;i<n-2;++i){ //we leave last two elemnt for j and k
            
            if(i==0 || nums[i] != nums[i-1]){  // as if i equal to i-1 then it will duplicate element hence we skip it by applying condition.
                
                int j = i + 1, k = n - 1;//  as we want two number pairs , j is left pointer , i is right pointerif sum is more decrement the right , if sum is less increment the left.
                
                while(j<k){
                    
                    int sum = nums[i] + nums[j] + nums[k];
                    if(sum == 0){
                        
                        result.push_back({nums[i], nums[j], nums[k]});
                        while(j<k && nums[j] == nums[j+1]) j++; // here we increment left ponter if there is duplicate of j present samr fot the k.
                        while(j<k && nums[k] == nums[k-1]) k--;
                        j++; k--;// if there is no duplicate then we directly increment j and decrement k
                    }
                    else if(sum>0) k--;
                    else j++;
                }
            }
        }
        return result;
    }
};
